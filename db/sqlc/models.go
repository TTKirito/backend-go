// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type EventTypes string

const (
	EventTypesEvent   EventTypes = "Event"
	EventTypesMeeting EventTypes = "Meeting"
)

func (e *EventTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventTypes(s)
	case string:
		*e = EventTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for EventTypes: %T", src)
	}
	return nil
}

type NullEventTypes struct {
	EventTypes EventTypes `json:"event_types"`
	Valid      bool       `json:"valid"` // Valid is true if EventTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventTypes) Scan(value interface{}) error {
	if value == nil {
		ns.EventTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventTypes), nil
}

type Genders string

const (
	GendersMan   Genders = "Man"
	GendersWomen Genders = "Women"
)

func (e *Genders) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Genders(s)
	case string:
		*e = Genders(s)
	default:
		return fmt.Errorf("unsupported scan type for Genders: %T", src)
	}
	return nil
}

type NullGenders struct {
	Genders Genders `json:"genders"`
	Valid   bool    `json:"valid"` // Valid is true if Genders is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenders) Scan(value interface{}) error {
	if value == nil {
		ns.Genders, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Genders.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenders) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Genders), nil
}

type Positions string

const (
	PositionsDesign  Positions = "Design"
	PositionsDevelop Positions = "Develop"
)

func (e *Positions) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Positions(s)
	case string:
		*e = Positions(s)
	default:
		return fmt.Errorf("unsupported scan type for Positions: %T", src)
	}
	return nil
}

type NullPositions struct {
	Positions Positions `json:"positions"`
	Valid     bool      `json:"valid"` // Valid is true if Positions is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPositions) Scan(value interface{}) error {
	if value == nil {
		ns.Positions, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Positions.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPositions) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Positions), nil
}

type Status string

const (
	StatusActive   Status = "Active"
	StatusInactive Status = "Inactive"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status `json:"status"`
	Valid  bool   `json:"valid"` // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type VisitTypes string

const (
	VisitTypesOffice VisitTypes = "Office"
	VisitTypesOnline VisitTypes = "Online"
)

func (e *VisitTypes) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VisitTypes(s)
	case string:
		*e = VisitTypes(s)
	default:
		return fmt.Errorf("unsupported scan type for VisitTypes: %T", src)
	}
	return nil
}

type NullVisitTypes struct {
	VisitTypes VisitTypes `json:"visit_types"`
	Valid      bool       `json:"valid"` // Valid is true if VisitTypes is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVisitTypes) Scan(value interface{}) error {
	if value == nil {
		ns.VisitTypes, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VisitTypes.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVisitTypes) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VisitTypes), nil
}

type Account struct {
	ID        int64     `json:"id"`
	Owner     string    `json:"owner"`
	Position  Positions `json:"position"`
	CreatedAt time.Time `json:"created_at"`
	Gender    Genders   `json:"gender"`
	Dob       time.Time `json:"dob"`
	Status    Status    `json:"status"`
}

type Event struct {
	ID    int64          `json:"id"`
	Title sql.NullString `json:"title"`
	// required
	StartTime  int64          `json:"start_time"`
	EndTime    int64          `json:"end_time"`
	IsEmegency bool           `json:"is_emegency"`
	Owner      int64          `json:"owner"`
	Note       sql.NullString `json:"note"`
	Type       EventTypes     `json:"type"`
	VisitType  VisitTypes     `json:"visit_type"`
	Meeting    sql.NullString `json:"meeting"`
	CreatedAt  time.Time      `json:"created_at"`
}

type Location struct {
	ID              int64          `json:"id"`
	Event           int64          `json:"event"`
	Lat             string         `json:"lat"`
	Long            string         `json:"long"`
	BlockNo         sql.NullInt32  `json:"block_no"`
	ApartmentName   sql.NullString `json:"apartment_name"`
	ApartmentNumber sql.NullInt32  `json:"apartment_number"`
	Street          string         `json:"street"`
	City            string         `json:"city"`
	Country         string         `json:"country"`
	CreatedAt       time.Time      `json:"created_at"`
}

type Participant struct {
	ID        int64     `json:"id"`
	Account   int64     `json:"account"`
	Event     int64     `json:"event"`
	CreatedAt time.Time `json:"created_at"`
}

type User struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
}

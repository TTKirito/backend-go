// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: location.sql

package db

import (
	"context"
	"database/sql"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (
    event,
    lat,
    long,
    block_no,
    apartment_name,
    apartment_number,
    street,
    city,
    country
) values (
   $1,$2, $3 ,$4, $5 ,$6 ,$7 ,$8 ,$9 
) RETURNING id, event, lat, long, block_no, apartment_name, apartment_number, street, city, country, created_at
`

type CreateLocationParams struct {
	Event           int64          `json:"event"`
	Lat             string         `json:"lat"`
	Long            string         `json:"long"`
	BlockNo         sql.NullInt32  `json:"block_no"`
	ApartmentName   sql.NullString `json:"apartment_name"`
	ApartmentNumber sql.NullInt32  `json:"apartment_number"`
	Street          string         `json:"street"`
	City            string         `json:"city"`
	Country         string         `json:"country"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation,
		arg.Event,
		arg.Lat,
		arg.Long,
		arg.BlockNo,
		arg.ApartmentName,
		arg.ApartmentNumber,
		arg.Street,
		arg.City,
		arg.Country,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Event,
		&i.Lat,
		&i.Long,
		&i.BlockNo,
		&i.ApartmentName,
		&i.ApartmentNumber,
		&i.Street,
		&i.City,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}

const getLocation = `-- name: GetLocation :one
SELECT id, event, lat, long, block_no, apartment_name, apartment_number, street, city, country, created_at FROM locations 
WHERE event = $1
LIMIT 1
`

func (q *Queries) GetLocation(ctx context.Context, event int64) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocation, event)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Event,
		&i.Lat,
		&i.Long,
		&i.BlockNo,
		&i.ApartmentName,
		&i.ApartmentNumber,
		&i.Street,
		&i.City,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations 
SET lat = $1,
    long = $2,
    block_no = $3,
    apartment_name = $4,
    apartment_number = $5,
    street = $6,
    city = $7,
    country = $8
WHERE id = $9
RETURNING id, event, lat, long, block_no, apartment_name, apartment_number, street, city, country, created_at
`

type UpdateLocationParams struct {
	Lat             string         `json:"lat"`
	Long            string         `json:"long"`
	BlockNo         sql.NullInt32  `json:"block_no"`
	ApartmentName   sql.NullString `json:"apartment_name"`
	ApartmentNumber sql.NullInt32  `json:"apartment_number"`
	Street          string         `json:"street"`
	City            string         `json:"city"`
	Country         string         `json:"country"`
	ID              int64          `json:"id"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocation,
		arg.Lat,
		arg.Long,
		arg.BlockNo,
		arg.ApartmentName,
		arg.ApartmentNumber,
		arg.Street,
		arg.City,
		arg.Country,
		arg.ID,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Event,
		&i.Lat,
		&i.Long,
		&i.BlockNo,
		&i.ApartmentName,
		&i.ApartmentNumber,
		&i.Street,
		&i.City,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: paticipant.sql

package db

import (
	"context"
)

const createParticipant = `-- name: CreateParticipant :one
INSERT INTO participants (
    account,
    event
)
values (
    $1, $2
) RETURNING id, account, event, created_at
`

type CreateParticipantParams struct {
	Account int64 `json:"account"`
	Event   int64 `json:"event"`
}

func (q *Queries) CreateParticipant(ctx context.Context, arg CreateParticipantParams) (Participant, error) {
	row := q.db.QueryRowContext(ctx, createParticipant, arg.Account, arg.Event)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.Account,
		&i.Event,
		&i.CreatedAt,
	)
	return i, err
}

const deleteParticipant = `-- name: DeleteParticipant :exec
DELETE FROM participants WHERE id = $1
`

func (q *Queries) DeleteParticipant(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteParticipant, id)
	return err
}

const listParticipant = `-- name: ListParticipant :many
SELECT id, account, event, created_at 
FROM participants
WHERE event = $1
LIMIT $2
OFFSET $3
`

type ListParticipantParams struct {
	Event  int64 `json:"event"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListParticipant(ctx context.Context, arg ListParticipantParams) ([]Participant, error) {
	rows, err := q.db.QueryContext(ctx, listParticipant, arg.Event, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Participant{}
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.ID,
			&i.Account,
			&i.Event,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

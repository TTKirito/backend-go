// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TTKirito/backend-go/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	sqlc "github.com/TTKirito/backend-go/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockStore) CreateAccount(arg0 context.Context, arg1 sqlc.CreateAccountParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockStoreMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockStore)(nil).CreateAccount), arg0, arg1)
}

// CreateEvent mocks base method
func (m *MockStore) CreateEvent(arg0 context.Context, arg1 sqlc.CreateEventParams) (sqlc.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent
func (mr *MockStoreMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockStore)(nil).CreateEvent), arg0, arg1)
}

// CreateEventTx mocks base method
func (m *MockStore) CreateEventTx(arg0 context.Context, arg1 sqlc.CreateEventTxParams) (sqlc.CreateEventTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventTx", arg0, arg1)
	ret0, _ := ret[0].(sqlc.CreateEventTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEventTx indicates an expected call of CreateEventTx
func (mr *MockStoreMockRecorder) CreateEventTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventTx", reflect.TypeOf((*MockStore)(nil).CreateEventTx), arg0, arg1)
}

// CreateLocation mocks base method
func (m *MockStore) CreateLocation(arg0 context.Context, arg1 sqlc.CreateLocationParams) (sqlc.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation
func (mr *MockStoreMockRecorder) CreateLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockStore)(nil).CreateLocation), arg0, arg1)
}

// CreateParticipant mocks base method
func (m *MockStore) CreateParticipant(arg0 context.Context, arg1 sqlc.CreateParticipantParams) (sqlc.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParticipant", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateParticipant indicates an expected call of CreateParticipant
func (mr *MockStoreMockRecorder) CreateParticipant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParticipant", reflect.TypeOf((*MockStore)(nil).CreateParticipant), arg0, arg1)
}

// DeleteAccount mocks base method
func (m *MockStore) DeleteAccount(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount
func (mr *MockStoreMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockStore)(nil).DeleteAccount), arg0, arg1)
}

// DeleteEvent mocks base method
func (m *MockStore) DeleteEvent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent
func (mr *MockStoreMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockStore)(nil).DeleteEvent), arg0, arg1)
}

// DeleteParticipant mocks base method
func (m *MockStore) DeleteParticipant(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteParticipant", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteParticipant indicates an expected call of DeleteParticipant
func (mr *MockStoreMockRecorder) DeleteParticipant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteParticipant", reflect.TypeOf((*MockStore)(nil).DeleteParticipant), arg0, arg1)
}

// GetAccount mocks base method
func (m *MockStore) GetAccount(arg0 context.Context, arg1 int64) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockStoreMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStore)(nil).GetAccount), arg0, arg1)
}

// GetEvent mocks base method
func (m *MockStore) GetEvent(arg0 context.Context, arg1 int64) (sqlc.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent
func (mr *MockStoreMockRecorder) GetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockStore)(nil).GetEvent), arg0, arg1)
}

// GetLocation mocks base method
func (m *MockStore) GetLocation(arg0 context.Context, arg1 int64) (sqlc.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation
func (mr *MockStoreMockRecorder) GetLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockStore)(nil).GetLocation), arg0, arg1)
}

// ListAccount mocks base method
func (m *MockStore) ListAccount(arg0 context.Context, arg1 sqlc.ListAccountParams) ([]sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccount", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccount indicates an expected call of ListAccount
func (mr *MockStoreMockRecorder) ListAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccount", reflect.TypeOf((*MockStore)(nil).ListAccount), arg0, arg1)
}

// ListEvent mocks base method
func (m *MockStore) ListEvent(arg0 context.Context, arg1 sqlc.ListEventParams) ([]sqlc.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvent", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvent indicates an expected call of ListEvent
func (mr *MockStoreMockRecorder) ListEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvent", reflect.TypeOf((*MockStore)(nil).ListEvent), arg0, arg1)
}

// ListParticipant mocks base method
func (m *MockStore) ListParticipant(arg0 context.Context, arg1 sqlc.ListParticipantParams) ([]sqlc.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticipant", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParticipant indicates an expected call of ListParticipant
func (mr *MockStoreMockRecorder) ListParticipant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticipant", reflect.TypeOf((*MockStore)(nil).ListParticipant), arg0, arg1)
}

// UpdateAccount mocks base method
func (m *MockStore) UpdateAccount(arg0 context.Context, arg1 sqlc.UpdateAccountParams) (sqlc.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockStoreMockRecorder) UpdateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockStore)(nil).UpdateAccount), arg0, arg1)
}

// UpdateEvent mocks base method
func (m *MockStore) UpdateEvent(arg0 context.Context, arg1 sqlc.UpdateEventParams) (sqlc.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent
func (mr *MockStoreMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockStore)(nil).UpdateEvent), arg0, arg1)
}

// UpdateLocation mocks base method
func (m *MockStore) UpdateLocation(arg0 context.Context, arg1 sqlc.UpdateLocationParams) (sqlc.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation
func (mr *MockStoreMockRecorder) UpdateLocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockStore)(nil).UpdateLocation), arg0, arg1)
}
